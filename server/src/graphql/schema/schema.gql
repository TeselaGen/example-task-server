 scalar JSON
 scalar Date
 scalar Number

 type typeUpdate {
  code: String!
  lastUpdated: Date
  createdAt: Date
  updatedAt: Date
  cid: String
 # Server generated property that indicates the last time this attribute was fetched 
  lastFetched: Date
 }

 type typeUpdateCursorResult {
  results: [typeUpdate]
  filter: JSON
  sort: [String]
  pageNumber: Int
  pageSize: Int
  totalResults: Int
  lastFetched: Date
  typeUpdates: [typeUpdate]
 }

 type createTypeUpdatePayload {
  createdItemsCursor: typeUpdateCursorResult
 }

 type updateTypeUpdatePayload {
  updatedItemsCursor: typeUpdateCursorResult
 }

 type updateTypeUpdatesWithQueryPayload {
  updatedItemsCursor: typeUpdateCursorResult
 }

 type deleteTypeUpdatePayload {
  deletedCount: Int
  typeUpdates: [typeUpdate]
 }

 type deleteTypeUpdatesWithQueryPayload {
  deletedCount: Int
  typeUpdates: [typeUpdate]
 }

 type microserviceQueue {
  authToken: String
  checkInInterval: Number
  controlToken: String
  id: String!
  input: JSON
  lastCheckIn: Date
  missedCheckInCount: Number
  result: JSON
  resultStatus: String
  service: String
  serviceUrl: String
  startedOn: Date
  status: String
  taskId: String
  trackingId: String
  createdAt: Date
  updatedAt: Date
  cid: String
 # Server generated property that indicates the last time this attribute was fetched 
  lastFetched: Date
  microserviceIoFiles(filter: JSON, sort: [String], pageNumber: Int, pageSize: Int): [microserviceIoFile]
 # Returns a paginated cursor result of microserviceIoFiles instead of an Array 
  microserviceIoFilesCursor(filter: JSON, sort: [String], pageNumber: Int, pageSize: Int): microserviceIoFileCursorResult
  microserviceQueueLogEntries(filter: JSON, sort: [String], pageNumber: Int, pageSize: Int): [microserviceQueueLogEntry]
 # Returns a paginated cursor result of microserviceQueueLogEntries instead of an Array 
  microserviceQueueLogEntriesCursor(filter: JSON, sort: [String], pageNumber: Int, pageSize: Int): microserviceQueueLogEntryCursorResult
 }

 type microserviceQueueCursorResult {
  results: [microserviceQueue]
  filter: JSON
  sort: [String]
  pageNumber: Int
  pageSize: Int
  totalResults: Int
  lastFetched: Date
  typeUpdates: [typeUpdate]
 }

 type createMicroserviceQueuePayload {
  createdItemsCursor: microserviceQueueCursorResult
 }

 type updateMicroserviceQueuePayload {
  updatedItemsCursor: microserviceQueueCursorResult
 }

 type updateMicroserviceQueuesWithQueryPayload {
  updatedItemsCursor: microserviceQueueCursorResult
 }

 type deleteMicroserviceQueuePayload {
  deletedCount: Int
  typeUpdates: [typeUpdate]
 }

 type deleteMicroserviceQueuesWithQueryPayload {
  deletedCount: Int
  typeUpdates: [typeUpdate]
 }

 type microserviceQueueLogEntry {
  channel: String
  details: String
  id: String!
  level: String
  message: String
  metadata: JSON
 # Reference key for microserviceQueue 
  microserviceQueueId: String
  microserviceQueue: microserviceQueue
  createdAt: Date
  updatedAt: Date
  cid: String
 # Server generated property that indicates the last time this attribute was fetched 
  lastFetched: Date
 }

 type microserviceQueueLogEntryCursorResult {
  results: [microserviceQueueLogEntry]
  filter: JSON
  sort: [String]
  pageNumber: Int
  pageSize: Int
  totalResults: Int
  lastFetched: Date
  typeUpdates: [typeUpdate]
 }

 type createMicroserviceQueueLogEntryPayload {
  createdItemsCursor: microserviceQueueLogEntryCursorResult
 }

 type updateMicroserviceQueueLogEntryPayload {
  updatedItemsCursor: microserviceQueueLogEntryCursorResult
 }

 type updateMicroserviceQueueLogEntriesWithQueryPayload {
  updatedItemsCursor: microserviceQueueLogEntryCursorResult
 }

 type deleteMicroserviceQueueLogEntryPayload {
  deletedCount: Int
  typeUpdates: [typeUpdate]
 }

 type deleteMicroserviceQueueLogEntriesWithQueryPayload {
  deletedCount: Int
  typeUpdates: [typeUpdate]
 }

 type microserviceIoFile {
  fileUrl: String
  id: String!
 # Reference key for microserviceQueue 
  microserviceQueueId: String
  microserviceQueue: microserviceQueue
 # Determines whether this is an input or output file 
  type: String
  destinationPath: String
  createdAt: Date
  updatedAt: Date
  cid: String
 # Server generated property that indicates the last time this attribute was fetched 
  lastFetched: Date
 }

 type microserviceIoFileCursorResult {
  results: [microserviceIoFile]
  filter: JSON
  sort: [String]
  pageNumber: Int
  pageSize: Int
  totalResults: Int
  lastFetched: Date
  typeUpdates: [typeUpdate]
 }

 type createMicroserviceIoFilePayload {
  createdItemsCursor: microserviceIoFileCursorResult
 }

 type updateMicroserviceIoFilePayload {
  updatedItemsCursor: microserviceIoFileCursorResult
 }

 type updateMicroserviceIoFilesWithQueryPayload {
  updatedItemsCursor: microserviceIoFileCursorResult
 }

 type deleteMicroserviceIoFilePayload {
  deletedCount: Int
  typeUpdates: [typeUpdate]
 }

 type deleteMicroserviceIoFilesWithQueryPayload {
  deletedCount: Int
  typeUpdates: [typeUpdate]
 }

 type user {
  id: String!
  username: String
  firstName: String
  lastName: String
  createdAt: Date
  updatedAt: Date
  cid: String
 # Server generated property that indicates the last time this attribute was fetched 
  lastFetched: Date
 }

 type userCursorResult {
  results: [user]
  filter: JSON
  sort: [String]
  pageNumber: Int
  pageSize: Int
  totalResults: Int
  lastFetched: Date
  typeUpdates: [typeUpdate]
 }

 type createUserPayload {
  createdItemsCursor: userCursorResult
 }

 type updateUserPayload {
  updatedItemsCursor: userCursorResult
 }

 type updateUsersWithQueryPayload {
  updatedItemsCursor: userCursorResult
 }

 type deleteUserPayload {
  deletedCount: Int
  typeUpdates: [typeUpdate]
 }

 type deleteUsersWithQueryPayload {
  deletedCount: Int
  typeUpdates: [typeUpdate]
 }

 input createTypeUpdateInput {
  code: String
  lastUpdated: Date
  createdAt: Date
  updatedAt: Date
  cid: String
  lastFetched: Date
 }

 input bulkCreatetypeUpdatesInput {
  createItems: [createTypeUpdateInput]
 }

 input updateTypeUpdateInput {
  code: String!
  lastUpdated: Date
  createdAt: Date
  updatedAt: Date
  cid: String
  lastFetched: Date
 }

 input updateTypeUpdateValuesInput {
  lastUpdated: Date
  createdAt: Date
  updatedAt: Date
  cid: String
  lastFetched: Date
 }

 input updateTypeUpdateQueryInput {
  values: updateTypeUpdateValuesInput
  where: JSON!
 }

 input updateTypeUpdatesWithQueryInput {
  updateQueries: [updateTypeUpdateQueryInput]
 }

 input deleteTypeUpdateInput {
  code: String!
 }

 input deleteTypeUpdatesWithQueryInput {
  deleteQueries: [JSON]
 }

 input createMicroserviceQueueInput {
  authToken: String
  checkInInterval: Number
  controlToken: String
  id: String
  input: JSON
  lastCheckIn: Date
  missedCheckInCount: Number
  result: JSON
  resultStatus: String
  service: String
  serviceUrl: String
  startedOn: Date
  status: String
  taskId: String
  trackingId: String
  createdAt: Date
  updatedAt: Date
  cid: String
  lastFetched: Date
  microserviceIoFiles: [createMicroserviceIoFileInput]
  microserviceQueueLogEntries: [createMicroserviceQueueLogEntryInput]
 }

 input bulkCreatemicroserviceQueuesInput {
  createItems: [createMicroserviceQueueInput]
 }

 input updateMicroserviceQueueInput {
  authToken: String
  checkInInterval: Number
  controlToken: String
  id: String!
  input: JSON
  lastCheckIn: Date
  missedCheckInCount: Number
  result: JSON
  resultStatus: String
  service: String
  serviceUrl: String
  startedOn: Date
  status: String
  taskId: String
  trackingId: String
  createdAt: Date
  updatedAt: Date
  cid: String
  lastFetched: Date
  microserviceIoFiles: [updateMicroserviceIoFileInput]
  microserviceQueueLogEntries: [updateMicroserviceQueueLogEntryInput]
 }

 input updateMicroserviceQueueValuesInput {
  authToken: String
  checkInInterval: Number
  controlToken: String
  input: JSON
  lastCheckIn: Date
  missedCheckInCount: Number
  result: JSON
  resultStatus: String
  service: String
  serviceUrl: String
  startedOn: Date
  status: String
  taskId: String
  trackingId: String
  createdAt: Date
  updatedAt: Date
  cid: String
  lastFetched: Date
 }

 input updateMicroserviceQueueQueryInput {
  values: updateMicroserviceQueueValuesInput
  where: JSON!
 }

 input updateMicroserviceQueuesWithQueryInput {
  updateQueries: [updateMicroserviceQueueQueryInput]
 }

 input deleteMicroserviceQueueInput {
  id: String!
  microserviceIoFiles: [deleteMicroserviceIoFileInput]
  microserviceQueueLogEntries: [deleteMicroserviceQueueLogEntryInput]
 }

 input deleteMicroserviceQueuesWithQueryInput {
  deleteQueries: [JSON]
 }

 input createMicroserviceQueueLogEntryInput {
  channel: String
  details: String
  id: String
  level: String
  message: String
  metadata: JSON
  microserviceQueueId: String
  microserviceQueue: createMicroserviceQueueInput
  createdAt: Date
  updatedAt: Date
  cid: String
  lastFetched: Date
 }

 input bulkCreatemicroserviceQueueLogEntriesInput {
  createItems: [createMicroserviceQueueLogEntryInput]
 }

 input updateMicroserviceQueueLogEntryInput {
  channel: String
  details: String
  id: String!
  level: String
  message: String
  metadata: JSON
  microserviceQueueId: String
  microserviceQueue: updateMicroserviceQueueInput
  createdAt: Date
  updatedAt: Date
  cid: String
  lastFetched: Date
 }

 input updateMicroserviceQueueLogEntryValuesInput {
  channel: String
  details: String
  level: String
  message: String
  metadata: JSON
  microserviceQueueId: String
  createdAt: Date
  updatedAt: Date
  cid: String
  lastFetched: Date
 }

 input updateMicroserviceQueueLogEntryQueryInput {
  values: updateMicroserviceQueueLogEntryValuesInput
  where: JSON!
 }

 input updateMicroserviceQueueLogEntriesWithQueryInput {
  updateQueries: [updateMicroserviceQueueLogEntryQueryInput]
 }

 input deleteMicroserviceQueueLogEntryInput {
  id: String!
  microserviceQueue: deleteMicroserviceQueueInput
 }

 input deleteMicroserviceQueueLogEntriesWithQueryInput {
  deleteQueries: [JSON]
 }

 input createMicroserviceIoFileInput {
  fileUrl: String
  id: String
  microserviceQueueId: String
  microserviceQueue: createMicroserviceQueueInput
  type: String
  destinationPath: String
  createdAt: Date
  updatedAt: Date
  cid: String
  lastFetched: Date
 }

 input bulkCreatemicroserviceIoFilesInput {
  createItems: [createMicroserviceIoFileInput]
 }

 input updateMicroserviceIoFileInput {
  fileUrl: String
  id: String!
  microserviceQueueId: String
  microserviceQueue: updateMicroserviceQueueInput
  type: String
  destinationPath: String
  createdAt: Date
  updatedAt: Date
  cid: String
  lastFetched: Date
 }

 input updateMicroserviceIoFileValuesInput {
  fileUrl: String
  microserviceQueueId: String
  type: String
  destinationPath: String
  createdAt: Date
  updatedAt: Date
  cid: String
  lastFetched: Date
 }

 input updateMicroserviceIoFileQueryInput {
  values: updateMicroserviceIoFileValuesInput
  where: JSON!
 }

 input updateMicroserviceIoFilesWithQueryInput {
  updateQueries: [updateMicroserviceIoFileQueryInput]
 }

 input deleteMicroserviceIoFileInput {
  id: String!
  microserviceQueue: deleteMicroserviceQueueInput
 }

 input deleteMicroserviceIoFilesWithQueryInput {
  deleteQueries: [JSON]
 }

 input createUserInput {
  id: String
  username: String
  firstName: String
  lastName: String
  createdAt: Date
  updatedAt: Date
  cid: String
  lastFetched: Date
 }

 input bulkCreateusersInput {
  createItems: [createUserInput]
 }

 input updateUserInput {
  id: String!
  username: String
  firstName: String
  lastName: String
  createdAt: Date
  updatedAt: Date
  cid: String
  lastFetched: Date
 }

 input updateUserValuesInput {
  username: String
  firstName: String
  lastName: String
  createdAt: Date
  updatedAt: Date
  cid: String
  lastFetched: Date
 }

 input updateUserQueryInput {
  values: updateUserValuesInput
  where: JSON!
 }

 input updateUsersWithQueryInput {
  updateQueries: [updateUserQueryInput]
 }

 input deleteUserInput {
  id: String!
 }

 input deleteUsersWithQueryInput {
  deleteQueries: [JSON]
 }


 type Query {
  typeUpdate(code: String!): typeUpdate
  typeUpdates(filter: JSON, sort: [String], pageNumber: Int, pageSize: Int): typeUpdateCursorResult
  microserviceQueue(id: String!): microserviceQueue
  microserviceQueues(filter: JSON, sort: [String], pageNumber: Int, pageSize: Int): microserviceQueueCursorResult
  microserviceQueueLogEntry(id: String!): microserviceQueueLogEntry
  microserviceQueueLogEntries(filter: JSON, sort: [String], pageNumber: Int, pageSize: Int): microserviceQueueLogEntryCursorResult
  microserviceIoFile(id: String!): microserviceIoFile
  microserviceIoFiles(filter: JSON, sort: [String], pageNumber: Int, pageSize: Int): microserviceIoFileCursorResult
  user(id: String!): user
  users(filter: JSON, sort: [String], pageNumber: Int, pageSize: Int): userCursorResult
 }

 type Mutation {
  createTypeUpdate(input: [createTypeUpdateInput]): createTypeUpdatePayload
  updateTypeUpdate(input: [updateTypeUpdateInput]): updateTypeUpdatePayload
  updateTypeUpdatesWithQuery(input: updateTypeUpdatesWithQueryInput!): updateTypeUpdatesWithQueryPayload
  deleteTypeUpdate(input: [deleteTypeUpdateInput]): deleteTypeUpdatePayload
  deleteTypeUpdatesWithQuery(input: deleteTypeUpdatesWithQueryInput!): deleteTypeUpdatesWithQueryPayload
  createMicroserviceQueue(input: [createMicroserviceQueueInput]): createMicroserviceQueuePayload
  updateMicroserviceQueue(input: [updateMicroserviceQueueInput]): updateMicroserviceQueuePayload
  updateMicroserviceQueuesWithQuery(input: updateMicroserviceQueuesWithQueryInput!): updateMicroserviceQueuesWithQueryPayload
  deleteMicroserviceQueue(input: [deleteMicroserviceQueueInput]): deleteMicroserviceQueuePayload
  deleteMicroserviceQueuesWithQuery(input: deleteMicroserviceQueuesWithQueryInput!): deleteMicroserviceQueuesWithQueryPayload
  createMicroserviceQueueLogEntry(input: [createMicroserviceQueueLogEntryInput]): createMicroserviceQueueLogEntryPayload
  updateMicroserviceQueueLogEntry(input: [updateMicroserviceQueueLogEntryInput]): updateMicroserviceQueueLogEntryPayload
  updateMicroserviceQueueLogEntriesWithQuery(input: updateMicroserviceQueueLogEntriesWithQueryInput!): updateMicroserviceQueueLogEntriesWithQueryPayload
  deleteMicroserviceQueueLogEntry(input: [deleteMicroserviceQueueLogEntryInput]): deleteMicroserviceQueueLogEntryPayload
  deleteMicroserviceQueueLogEntriesWithQuery(input: deleteMicroserviceQueueLogEntriesWithQueryInput!): deleteMicroserviceQueueLogEntriesWithQueryPayload
  createMicroserviceIoFile(input: [createMicroserviceIoFileInput]): createMicroserviceIoFilePayload
  updateMicroserviceIoFile(input: [updateMicroserviceIoFileInput]): updateMicroserviceIoFilePayload
  updateMicroserviceIoFilesWithQuery(input: updateMicroserviceIoFilesWithQueryInput!): updateMicroserviceIoFilesWithQueryPayload
  deleteMicroserviceIoFile(input: [deleteMicroserviceIoFileInput]): deleteMicroserviceIoFilePayload
  deleteMicroserviceIoFilesWithQuery(input: deleteMicroserviceIoFilesWithQueryInput!): deleteMicroserviceIoFilesWithQueryPayload
  createUser(input: [createUserInput]): createUserPayload
  updateUser(input: [updateUserInput]): updateUserPayload
  updateUsersWithQuery(input: updateUsersWithQueryInput!): updateUsersWithQueryPayload
  deleteUser(input: [deleteUserInput]): deleteUserPayload
  deleteUsersWithQuery(input: deleteUsersWithQueryInput!): deleteUsersWithQueryPayload
 }
