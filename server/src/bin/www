#!/usr/bin/env node

/**
 * Module dependencies.
 */
const dotenv = require("dotenv");
dotenv.config();

const queueManager = require("@teselagen/queue-middleware");
const { simpleDemo, j5Demo } = require("../demo");
async function startUp() {
  var initApp = require("../app");
  var debug = console.log; //require('debug')('example-server:server');
  var http = require("http");

  const app = await initApp();

  /**
   * Get port from environment and store in Express.
   */

  var port = normalizePort(process.env.PORT || "3000");
  app.set("port", port);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  if (process.env.LISTEN_IP) {
    server.listen(port, process.env.LISTEN_IP);
    console.log(`Listening on host: ${process.env.LISTEN_IP}`);
  } else {
    server.listen(port);
    console.log(`Listening on default host`);
  }
  server.on("error", onError);
  server.on("listening", onListening);

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== "listen") {
      throw error;
    }

    var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case "EACCES":
        console.error(bind + " requires elevated privileges");
        process.exit(1);
        break;
      case "EADDRINUSE":
        console.error(bind + " is already in use");
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
    queueManager.startDrain();
    if (process.env.DEMO) {
      simpleDemo(app);
    }
  }
}

startUp();
